extends ../layout.pug

block meta
    - var title = network.hash.slice(0,6)
    - var identicon = `${http_host}/static/networks/${network.hash}.png`
    meta(property="og:title" content=`${title}`)
    meta(property="og:type" content="website")
    meta(property="og:url" content=`${http_host}/network-profiles/${network.hash}`)
    meta(property="og:image" content=`${identicon}`)

block script
    script(src="/static/timeago.js")
    script.
        var app = new Vue({
            el: 'main',
            data: {
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                matches: !{ JSON.stringify(matches) },
            },
            methods: {
                getWinrate(match) {
                    let winrate = match.network1_wins * 100 / (match.network1_wins + match.network1_losses);
                    return winrate.toFixed(2);
                }
            }
        })

    style.
        td > .btn {
            min-width: 0;
        }

block content
    v-container(grid-list-md text-xs-center)
        v-layout(row wrap)
            v-flex(xs3)
                v-card
                    v-card-media(src=`${identicon}` height="200")
                    v-card-text
                        h2.text-center
                            if(network.networkID != null)
                                div.green LZ##{network.networkID}
                            b #{title} 
                        a.btn.btn-light.btn-block.border-dark(href=`${http_host}/networks/${network.hash}.gz`) Download
                        v-list
                            v-list-tile
                                div Architecture
                                v-spacer
                                div #{network.filters}x#{network.blocks}
                            v-list-tile
                                div Training 
                                v-spacer
                                div #{network.training_count.abbr(4)} #{network.training_steps ? "+" + network.training_steps.abbr(3) : ""}
                            v-list-tile
                                div Since
                                v-spacer
                                div.time-ago #{network._id.getTimestamp().getTime()}
                            v-list-tile #{network.description}
            
            v-flex(xs9)
                v-tabs
                    v-tab(href=`/network-profiles/${network.hash}/matches`) Match Games
                v-data-table(:items="matches" item-key="_id" hide-actions)
                    template(slot="headers"  slot-scope="props")
                        tr
                            th Uploaded(*)
                            th Network Hashes
                            th Result
                            th Games
                            th SPRT
                    
                    template(slot="items"  slot-scope="props")
                        tr
                            td.time-ago {{ props.item.time | timeAgo }}
                            td
                                v-tooltip(top)
                                    v-btn(slot="activator" flat small :href="`/networks/${props.item.network1.hash}.gz`") {{ props.item.network1.hash.slice(0,6) }}
                                    span {{ props.item.network1.training_count | abbr(4) }} +{{ props.item.network1.training_steps | abbr(3)}}
                                v-btn(flat small :href="`/match-games/${props.item._id}`" id="vs") VS
                                v-tooltip(top)
                                    v-btn(slot="activator" flat small :href="`/networks/${props.item.network2.hash}.gz`") {{ props.item.network2.hash.slice(0,6) }}
                                    span {{ props.item.network2.training_count | abbr(4) }} +{{ props.item.network2.training_steps | abbr(3)}}
                            td {{ `${props.item.network1_wins} : ${props.item.network1_losses}` }} {{ `(${getWinrate(props.item)}%)` }}
                            td {{ `${props.item.network1_wins + props.item.network1_losses} / ${props.item.number_to_play}` }}
                            td
                                span.caption(v-if="props.item.SPRT === true || props.item.SPRT === false" :class="props.item.SPRT ? 'green white--text pa-1' : 'black white--text pa-1'")
                                    b {{ props.item.SPRT ? 'Pass' : 'Failed' }}
                                v-progress-linear(v-else v-model="props.item.SPRT")

